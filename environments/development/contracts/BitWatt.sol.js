// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"supply","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"_nominee","type":"address"}],"name":"addCurator","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"_nominee","type":"address"}],"name":"addNewMember","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"issueBitwatts","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "60c0604090815260016060819052608081905260a081905233600160a060020a03166000908152600260205291822080546201000061010060ff1990921690931761ff0019161762ff0000191691909117905561022690819061006190396000f3606060405236156100565760e060020a600035046318160ddd811461005857806334f0e39e1461006d57806370a082311461009f57806398eb8d93146100c4578063a63d5dd1146100f6578063a9059cbb14610123575b005b60005b60408051918252519081900360200190f35b61005b600435600160a060020a033316600090815260026020526040812054610100900460ff16151561019257610002565b61005b600435600160a060020a0381166000908152600160205260409020545b919050565b61005b600435600160a060020a033316600090815260026020526040812054610100900460ff1615156101ce57610002565b61005b600435600160a060020a03331660009081526002602052604081205460ff16151561017557610002565b61005b600435602435600160a060020a03331660009081526001602052604081205482901061016f57604080822080548490039055600160a060020a0384168252902080548201905560015b92915050565b6001602081905260408220805484019055815483019091556100bf565b600160a060020a0382168152604081205462010000900460ff16156101c95760409020805461ff00191661010017905560016100bf565b6100bf565b600160a060020a0382168152604081205462010000900460ff1615156101c9576040808220805460c09092526001606081905260809390935260a083905260ff19909116821762ffff001916620100001790556100bf56",
    unlinked_binary: "60c0604090815260016060819052608081905260a081905233600160a060020a03166000908152600260205291822080546201000061010060ff1990921690931761ff0019161762ff0000191691909117905561022690819061006190396000f3606060405236156100565760e060020a600035046318160ddd811461005857806334f0e39e1461006d57806370a082311461009f57806398eb8d93146100c4578063a63d5dd1146100f6578063a9059cbb14610123575b005b60005b60408051918252519081900360200190f35b61005b600435600160a060020a033316600090815260026020526040812054610100900460ff16151561019257610002565b61005b600435600160a060020a0381166000908152600160205260409020545b919050565b61005b600435600160a060020a033316600090815260026020526040812054610100900460ff1615156101ce57610002565b61005b600435600160a060020a03331660009081526002602052604081205460ff16151561017557610002565b61005b600435602435600160a060020a03331660009081526001602052604081205482901061016f57604080822080548490039055600160a060020a0384168252902080548201905560015b92915050565b6001602081905260408220805484019055815483019091556100bf565b600160a060020a0382168152604081205462010000900460ff16156101c95760409020805461ff00191661010017905560016100bf565b6100bf565b600160a060020a0382168152604081205462010000900460ff1615156101c9576040808220805460c09092526001606081905260809390935260a083905260ff19909116821762ffff001916620100001790556100bf56",
    address: "0x5f7afdeb05bc92915ae969a37ab96775305131fc",
    generated_with: "2.0.9",
    contract_name: "BitWatt"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("BitWatt error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("BitWatt error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("BitWatt error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("BitWatt error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.BitWatt = Contract;
  }

})();
